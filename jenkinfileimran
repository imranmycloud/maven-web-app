pipeline {
    agent any

    environment {
        MAVEN_VERSION = '3.9.4'
        MAVEN_HOME = "${env.WORKSPACE}/apache-maven-${MAVEN_VERSION}"
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"

        AWS_ACCOUNT_ID = "900671793678"
        AWS_DEFAULT_REGION = "us-east-1"
        IMAGE_REPO_NAME = "devopshint"
        IMAGE_TAG = "latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/master']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/imranmycloud/maven-web-app.git']]
                )
            }
        }

        stage('Install Maven Build Tool') {
            steps {
                sh '''
                    wget https://dlcdn.apache.org/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
                    tar -xzvf apache-maven-${MAVEN_VERSION}-bin.tar.gz
                '''
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn --version'
            }
        }

        stage('Compile Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test') {
                    sh "${MAVEN_HOME}/bin/mvn compile"
                }
            }
        }

        stage('Test Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test') {
                    sh "${MAVEN_HOME}/bin/mvn test"
                }
            }
        }

        stage('Package Application') {
            steps {
                dir('/var/lib/jenkins/workspace/test') {
                    sh "${MAVEN_HOME}/bin/mvn package"
                }
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                dir('/var/lib/jenkins/workspace/test') {
                    withSonarQubeEnv('sonar') {
                        sh "${MAVEN_HOME}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=test_project -Dsonar.projectName='test_project'"
                    }
                }
            }
        }

        stage('Nexus Artifact Upload') {
            steps {
                dir('/var/lib/jenkins/workspace/test/target') {
                    nexusArtifactUploader(
                        artifacts: [[artifactId: 'testartifactId', classifier: '', file: 'maven-web-app.war', type: 'war']],
                        credentialsId: 'nexus-credentials',
                        groupId: 'com.test.app',
                        nexusUrl: '54.86.130.120:8081',
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        repository: 'testrepository',
                        version: '2.1.1-SNAPSHOT'
                    )
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${env.AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${env.REPOSITORY_URI}
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${env.IMAGE_REPO_NAME}:${env.IMAGE_TAG}")
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                script {
                    sh """
                        docker tag ${env.IMAGE_REPO_NAME}:${env.IMAGE_TAG} ${env.REPOSITORY_URI}:${env.IMAGE_TAG}
                        docker push ${env.REPOSITORY_URI}:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    kubeconfig(
                        credentialsId: 'kubernetes',
                        serverUrl: ''
                    ) {
                        sh 'kubectl apply -f k8s-deploy.yml'
                    }
                }
            }
        }
    }
}
